You can use the fact that the cyclical order of the people does not change when somebody gets out at the stop.
First, pre-process all the queries. Maintain a cyclic linked list that contains all the people and a pointer to the first person on the bus. When a person enters the bus, add him to the list and change the pointer to him if he used the front door. When a person x leaves the bus, change the pointer to the person next to him in the linked list and KEEP x in the linked list. At the end, we have a linked list that contains all the people; the order of the people in the bus at any moment is the order of these people in the linked list.
Since you know the order of the people, make a Fenwick tree where the i_th cell corresponds to the i_th person in the order. When a person enters the bus, +1 that cell; if a person leaves, -1 that cell. Then, when a person leaves, we just sum the number of people between him and the ends of the bus using this Fenwick tree. Note that we can tell which person is in front of pre-processing.